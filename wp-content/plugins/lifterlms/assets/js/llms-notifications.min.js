!function(f){window.llms=window.llms||{},window.llms.notifications=new function(){var t,s=this,i=window.llms&&window.llms.notification_settings?window.llms.notification_settings:{},n=i.heartbeat_interval?i.heartbeat_interval:2e4,o=[],e=[];function a(t){-1===e.indexOf(t)&&e.push(t)}function r(t){pump(function(){t&&"unload"===t||!s.has_notifications||s.show_all()})}function l(){t=setInterval(r,n)}return pump=function(i){var n=!!e.length;LLMS.Ajax.call({data:{action:"notifications_heartbeart",dismissals:e},beforeSend:function(){if(s.block_ajax)return s.restart_heartbeat=!0,clearInterval(t),i(),!1;s.block_ajax=!0},complete:function(){s.restart_heartbeat&&(s.restart_heartbeat=!1,l()),s.block_ajax=!1},success:function(t){e=n?[]:e,t.success&&t.data&&s.queue(t.data.new),i()}})},this.block_ajax=!1,this.restart_heartbeat=!1,this.init=function(){this.is_user_logged_in()&&(window.onbeforeunload=function(){r("unload")},f("body").on("click",".llms-notification-dismiss",function(){s.dismiss(f(this).closest(".llms-notification"))}),r(),l())},this.queue=function(t){for(var i in t)t.hasOwnProperty(i)&&!1===this.notification_exists(t[i].id)&&o.push(t[i])},this.dismiss=function(t){var i=this;t.removeClass("visible"),a(t.attr("data-id")),setTimeout(function(){i.reposition(t.next(".llms-notification.visible"))},10)},this.notification_exists=function(t){for(var i in o)if(o.hasOwnProperty(i)&&t===o[i].id)return i;return!1},this.get_offset=function(t){return t||(t=f(".llms-notification.visible").last()),t.offset()?t.offset().top+t.outerHeight()+12:24},this.has_notifications=function(){return o.length},this.is_user_logged_in=function(){return f("body").hasClass("logged-in")},this.reposition=function(t){var i,n=this,s=".llms-notification.visible";t.length||(t=f(s).first()),t.css("top",n.get_offset(t.prevAll(s).first())),(i=t.next(s)).length&&setTimeout(function(){n.reposition(i)},150)},this.show_all=function(){var t,i=this,n=0;t=setInterval(function(){n<o.length?(o[n].shown||(o[n].shown=!0,i.show_one(o[n])),n++):clearInterval(t)},100)},this.show_one=function(t){var i=this,n=f(t.html);n.find("a").on("click",function(t){t.preventDefault();var i=f(this);a(n.attr("data-id")),window.location=i.attr("href")}),f("body").append(n),n.css("top",i.get_offset()),setTimeout(function(){n.addClass("visible")},1),n.attr("data-auto-dismiss")&&(a(n.attr("data-id")),setTimeout(function(){i.dismiss(n)},n.attr("data-auto-dismiss")))},this.init(),this}}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
